trigger:
  branches:
    include:
    - main

pr:
  autoCancel: true
  branches:
    include:
    - main

variables:
  HELM_CHART_NAME: 'aad-auth-proxy'
  ACR_REGISTRY: 'aadproxydev.azurecr.io'
  ACR_REPOSITORY: '/internal/azuremonitor/auth-proxy/dev/aad-auth-proxy/images'
  ACR_REPOSITORY_HELM: '/internal/azuremonitor/auth-proxy/dev'
  MCR_REGISTRY: 'mcr.microsoft.com'
  MCR_REPOSITORY: '/azuremonitor/auth-proxy/dev/aad-auth-proxy/images'
  MCR_REPOSITORY_HELM: '/azuremonitor/auth-proxy/dev/aad-auth-proxy'
  MCR_REPOSITORY_HELM_DEPENDENCIES: '/azuremonitor/auth-proxy/dev'
  IS_PR: $[eq(variables['Build.Reason'], 'PullRequest')]
  IS_MAIN_BRANCH: $[eq(variables['Build.SourceBranchName'], 'main')]

jobs:
- job: Common
  displayName: Set image tags and publish Ev2 artifacts
  pool:
    name: Azure Pipelines
  steps:
    - bash: |
        if [ $(IS_PR) == "True" ]; then
          BRANCH_NAME=$(System.PullRequest.SourceBranch)
        else
          BRANCH_NAME=$(Build.SourceBranch)
          BRANCH_NAME=${BRANCH_NAME#refs/heads/}
        fi
        BRANCH_NAME=$(echo $BRANCH_NAME | tr / - | tr . - | tr _ - | cut -c1-90)
        COMMIT_SHA=$(echo $(Build.SourceVersion) | cut -b -8)
        DATE=$(TZ=America/Los_Angeles date +%m-%d-%Y)
        VERSION=$(cat $(Build.SourcesDirectory)/VERSION)
        SEMVER=$VERSION-$BRANCH_NAME-$DATE-$COMMIT_SHA

        IMAGE_TAG=$SEMVER
        FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$IMAGE_TAG
        HELM_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY_HELM/$HELM_CHART_NAME:$SEMVER
        
        echo "##vso[build.updatebuildnumber]$SEMVER"
        echo "##vso[task.setvariable variable=SEMVER;isOutput=true]$SEMVER"
        echo "##vso[task.setvariable variable=FULL_IMAGE_NAME;isOutput=true]$FULL_IMAGE_NAME"
        echo "##vso[task.setvariable variable=HELM_CHART_NAME;isOutput=true]$HELM_CHART_NAME"
        echo "##vso[task.setvariable variable=HELM_FULL_IMAGE_NAME;isOutput=true]$HELM_FULL_IMAGE_NAME"
      displayName: 'Build: set image registry, repo, and tags'
      name: setup
      
    - bash: |
        cd $(Build.SourcesDirectory)/.pipelines/deployment/Scripts
        cp ../../../deploy/chart/aad-auth-proxy aad-auth-proxy -r
        export MCR_REPOSITORY='/azuremonitor/auth-proxy/dev/aad-auth-proxy/images'
        export MCR_REPOSITORY_HELM_DEPENDENCIES='/azuremonitor/auth-proxy/dev'
        export HELM_SEMVER=$SETUP_SEMVER
        export IMAGE_TAG=$SETUP_SEMVER
        env
        envsubst < aad-auth-proxy/Chart-template.yaml > aad-auth-proxy/Chart.yaml && envsubst < aad-auth-proxy/values-template.yaml > aad-auth-proxy/values.yaml
        tar -czvf ../artifacts.tar.gz pushAgentToAcr.sh pushChartToAcr.sh aad-auth-proxy
      displayName: 'Ev2: package artifacts.tar.gz for prod release'

    - task: CopyFiles@2
      displayName: "Ev2: copy Ev2 deployment artifacts to staging directory"
      inputs:
        SourceFolder: "$(Build.SourcesDirectory)/.pipelines/deployment"
        Contents: |
          **/*
        TargetFolder: '$(Build.ArtifactStagingDirectory)/deploy'

    - task: PublishBuildArtifacts@1
      displayName: "Ev2: publish Ev2 deployment artifacts"
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop

- job: Build
  displayName: Build image
  pool:
    name: Azure Pipelines
  dependsOn: common
  variables:
    LINUX_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.FULL_IMAGE_NAME'] ]
  steps:

    - task: CodeQL3000Init@0
      displayName: 'SDL: init codeql'
      condition: or(eq(variables.IS_PR, true), eq(variables.IS_MAIN_BRANCH, true))

    - task: GoTool@0
      displayName: "Build: specify golang version"
      inputs:
        version: '1.19'

    - task: Gosec@1
      displayName: 'SDL: run gosec'
      condition: or(eq(variables.IS_PR, true), eq(variables.IS_MAIN_BRANCH, true))
      inputs:
        targetPattern: 'gosecPattern'
        targetGosecPattern: '$(Build.SourcesDirectory)/src'

    - bash: |
        wget https://github.com/microsoft/DevSkim/releases/download/v0.6.9/DevSkim_linux_0.6.9.zip
        unzip DevSkim_linux_0.6.9.zip
        chmod 775 DevSkim_linux_0.6.9/devskim
        ./DevSkim_linux_0.6.9/devskim analyze $(Build.SourcesDirectory)/src --ignore-globs **/deploy/dashboard/**,**/react/static/** --severity critical,important
      displayName: 'SDL: run devskim'
      condition: or(eq(variables.IS_PR, true), eq(variables.IS_MAIN_BRANCH, true))
      workingDirectory: $(Build.SourcesDirectory)

    - bash: |
        echo Building and compiling aad-auth-proxy
        # Install golang.
        # https://golang.org/doc/install#install
        wget -nv -c https://go.dev/dl/go1.19.2.linux-amd64.tar.gz
        [ -d /usr/local/go ] && rm -rf /usr/local/go
        tar -C /usr/local -xzf go1.19.2.linux-amd64.tar.gz
        # Installing tests dependencies.
        export PATH=$PATH:/usr/local/go/bin
        export GOBIN=/usr/local/go/bin

        echo Restoring packages

        go get -v -t -d
        if [ $? != 0 ]; then
          printf "Error : [%d] when executing command: go get" $?
          exit $?
        fi

        # Note: Building in ubuntu machine, but using alpine image, so we need to statically link binary to libraries
        # https://stackoverflow.com/questions/58205781/dockerfile-error-standard-init-linux-go207-exec-user-process-caused-no-such
        env CGO_ENABLED=0 go build -o main -ldflags "-w -s -v"

        if [ $? != 0 ]; then
          printf "Error building main"
          exit 1
        fi

        tar cvf aad-auth-proxy.tar main

        if [ $? != 0 ]; then
          printf "Error packing: aad-auth-proxy.tar"
          exit 1
        fi
      workingDirectory: $(Build.SourcesDirectory)/src/
      displayName: 'Compile and build tar file'

    - bash: |
        mkdir -p $(Build.ArtifactStagingDirectory)/linux
        docker buildx create --name testbuilder
        docker buildx use testbuilder
        docker login $(ACR_REGISTRY) -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
        if [ "$(Build.Reason)" != "PullRequest" ]; then
          docker buildx build . --file ./Dockerfile -t $(FULL_IMAGE_NAME) --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --push
          docker pull $(FULL_IMAGE_NAME)
        else
          docker buildx build . --file ./Dockerfile -t $(FULL_IMAGE_NAME) --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --load
        fi
      workingDirectory: $(Build.SourcesDirectory)/src/
      displayName: "Build: build and push image to dev ACR"

    - bash: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 $(FULL_IMAGE_NAME)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: "Build: run trivy scan"

    - task: CodeQL3000Finalize@0
      displayName: 'SDL: run codeql'
      condition: or(eq(variables.IS_PR, true), eq(variables.IS_MAIN_BRANCH, true))

    - task: ComponentGovernanceComponentDetection@0
      displayName: "SDL: run component governance"
      condition: and(eq(variables.IS_PR, false), eq(variables.IS_MAIN_BRANCH, true))
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        dockerImagesToScan: '$(FULL_IMAGE_NAME)'
        alertWarningLevel: 'High'

    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: "Ev2: Generate image artifacts"
      condition: and(eq(variables.IS_PR, false), eq(variables.IS_MAIN_BRANCH, true))
      inputs:
        BuildDropPath: '$(Build.ArtifactStagingDirectory)/linux'
        DockerImagesToScan: '$(FULL_IMAGE_NAME)'

    - task: SdtReport@2
      displayName: 'SDL: generate report'
      condition: or(eq(variables.IS_PR, true), eq(variables.IS_MAIN_BRANCH, true))
      inputs:
        GdnExportAllTools: false
        GdnExportGdnToolBinSkim: true
        GdnExportGdnToolBinSkimSeverity: 'Note'
        GdnExportGdnToolGosec: true
        GdnExportGdnToolGosecSeverity: 'Note'
        GdnExportGdnToolSemmle: true
        GdnExportGdnToolSemmleSeverity: 'Note'

    - task: PublishSecurityAnalysisLogs@3
      displayName: 'SDL: publish report'
      condition: or(eq(variables.IS_PR, true), eq(variables.IS_MAIN_BRANCH, true))
      inputs:
        ArtifactName: 'CodeAnalysisLogs'
        ArtifactType: 'Container'
        PublishProcessedResults: true
        AllTools: true
        ToolLogsNotFoundAction: 'Standard'

    - task: PublishBuildArtifacts@1
      displayName: "Ev2: Publish image artifacts"
      condition: and(eq(variables.IS_PR, false), eq(variables.IS_MAIN_BRANCH, true))
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop

    - task: PostAnalysis@2
      displayName: 'SDL: Post-Build Analysis'
      condition: or(eq(variables.IS_PR, true), eq(variables.IS_MAIN_BRANCH, true))
      inputs:
        GdnBreakAllTools: false
        GdnBreakGdnToolBinSkim: true
        GdnBreakGdnToolBinSkimSeverity: 'Warning'
        GdnBreakGdnToolGosec: true
        GdnBreakGdnToolGosecSeverity: 'Warning'
        GdnBreakGdnToolSemmle: true
        GdnBreakGdnToolSemmleSeverity: 'Warning'

- job: Chart
  displayName: "Package helm chart"
  pool:
    name: Azure Pipelines
  dependsOn:
  - Common
  - Build
  variables:
    HELM_CHART_NAME: $[ dependencies.common.outputs['setup.HELM_CHART_NAME'] ]
    HELM_SEMVER: $[ dependencies.common.outputs['setup.SEMVER'] ]
    IMAGE_TAG: $[ dependencies.common.outputs['setup.SEMVER'] ]
    HELM_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.HELM_FULL_IMAGE_NAME'] ]
  steps:
  - task: HelmInstaller@1
    displayName: 'Build: install Helm version'
    inputs:
      helmVersionToInstall: latest

  - bash: |
      envsubst < $(Build.SourcesDirectory)/src/deploy/chart/aad-auth-proxy/Chart-template.yaml > $(Build.SourcesDirectory)/src/deploy/chart/aad-auth-proxy/Chart.yaml && envsubst < $(Build.SourcesDirectory)/src/deploy/chart/aad-auth-proxy/values-template.yaml > $(Build.SourcesDirectory)/src/deploy/chart/aad-auth-proxy/values.yaml
      helm version
    displayName: "Build: substitute chart version in Chart.yaml and values.yaml"

  - bash: |
      helm package ./aad-auth-proxy/
    workingDirectory: $(Build.SourcesDirectory)/src/deploy/chart/
    displayName: "Build: package helm chart"

  - bash: |
      helm registry login $(ACR_REGISTRY) -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
      helm push $(HELM_CHART_NAME)-$(HELM_SEMVER).tgz oci://$(ACR_REGISTRY)$(ACR_REPOSITORY_HELM)
      mkdir -p $(Build.ArtifactStagingDirectory)/chart
      echo {\"image.name\":\"$(HELM_FULL_IMAGE_NAME)\"} > $(Build.ArtifactStagingDirectory)/chart/metadata.json
    workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/
    displayName: "Build: push helm chart to dev ACR"
    condition: eq(variables.IS_PR, false)
    
  - task: PublishBuildArtifacts@1
    displayName: "Ev2: publish helm chart artifacts"
    condition: and(eq(variables.IS_PR, false), eq(variables.IS_MAIN_BRANCH, true))
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop